제네릭스(Generics)
- 컴파일시 타입을 체크해 주는 기능(compile-time type check) - JDK1.5
- 실행시 발생 에러를 어떻게하면 컴파일 에러로 끌고 올까 고민하다 나온게 제네릭스
- 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌

제네릭스의 장점
1. 타입 안정성을 제공한다.
2. 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.

타입 변수
- 제네릭 클래스를 작성할 때, Object타입 대신 타입 변수(E)를 선언해서 사용
- object를 포함한 클래스는 제네릭 클래스로 바뀜
- 객체를 생성시, 타입 변수(E) 대신 실제 타입(Tv)을 지정(대입)
- 타입 변수 대신 실제 타입이 지정되면, 형변환 생략 가능

제네릭 타입과 다형성
- 참조 변수와 생성자의 대입된 타입은 일치해야 한다.
- 제네릭 클래스간의 다형성은 성립(여전히 대입된 타입은 일치해야)
List<Tv> list = new ArrayList<Tv>();	// OK. 다형성. ArrayList가 List를 구현
List<Tv> list = new LinkedList<Tv>();	// OK. 다형성. LinkedList가 List를 구현

- 매개변수의 다형성도 성립
ArrayList<Product> list = new ArrayList<product>();
list.add(new Product());
list.add(new Tv());		// OK
list.add(new Audio());	// OK

HashMap<K,V>
- 여러 개의 타입 변수가 필요한 경우, 콤마(,)를 구분자로 선언

제한된 제네릭 클래스
- extends로 대입할 수 있는 타입을 제한
Class FruitBox<T extends Fruit> {	// Fruit의 자손만 타입으로 지정 가능
	ArrayList<T> list = new ArrayList<T>();
	…
}

- 인터페이스인 경우에도 extends를 사용
interface Eatable {}
Class FruitBox extends Eatable{ … }

제네릭스의 제약
- 타입 변수에 대입은 인스턴스 별로 다르게 가능
- static 멤버에 타입 변수 사용 불가
- 배열(객체) 생성할 때 타입 변수 사용 불가. 타입 변수로 배열 선언은 가능
class Box<T> {
	T[] itemArr;	// OK. T타입의 배열을 위한 참조변수
		…
	T[] toArray() {
		T[] tmpArr = new T[itemArr.length];	// 에러. 제네릭 배열 생성 불가
