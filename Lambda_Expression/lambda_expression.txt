람다식(Lambda Expression)
- 함수(메서드)를 간단한 ‘식(expression)’으로 표현하는 방법
int max(int a, int b) {
	return a > b ? a : b;		—>			(a, b) -> a > b : a : b
}

- 익명 함수(이름이 없는 함수, anonymous function)
- 함수와 메서드의 차이
1. 근본적으로 동일. 함수는 일반적 용어, 메서드는 객체지향개념 용어
2. 함수는 클래스에 독립적, 메서드는 클래스에 종속적

람다식 작성하기
1. 메서드의 이름과 반환 타입을 제거하고 ‘->’를 블록{} 앞에 추가한다.
(int a, int b) -> { return a > b ? a : b;}

2. 반환 값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에 ‘;’ 안 붙임)
(int a, int b) -> a > b ? a : b

3. 매개변수의 타입이 추론 가능하면 생략가능(대부분의 경우 생략 가능)
(a, b) -> a > b ? a : b

람다식 작성하기 - 주의사항
1. 매개변수가 하나인 경우, 괄호() 생략 가능(타입이 없을 때만
a -> a * a	// OK
int a -> a * a	// Error (int a) -> a * a

2. 블록 안의 문장이 하나뿐 일때, 괄호{} 생략 가능(끝에 ‘;’ 안 붙임)
(int i) -> {
	System.out.println(i);	—>	(int i) -> System.out.println(i)
}
단, 하나뿐인 문장이 return문이면 괄호{} 생략 불가

람다식은 익명 함수? 익명 객체!
- 람다식은 익명 함수가 아니라 익명 객체이다.
※ 익명 클래스 7장
객체의 선언과 생성을 동시에

람다식(익명 객체)을 다루기 위한 참조변수가 필요. 참조변수의 타입은?
Object

함수형 인터페이스
- 단 하나의 추상 메서드만 선언된 인터페이스
interface MyFunction {
	public abstract int max(int a, int b);
}

MyFunction f = new MyFunction() {
	public int max(int a, int b) {
		return a > b ? a : b;
		}
	};

int value = f.max(3, 5); // OK. MyFunction에 max()가 있음

- 함수형 인터페이스 타입의 참조 변수로 람다식을 참조할 수 있음.
(단, 함수형 인터페이스의 메서드와 람다식의 매개변수 개수와 반환타입이 일치해야 함.)
MyFunction f = (a, b) -> a > b ? a : b;
int value = f.max(3, 5);	// 실제로는 람다식(익명 함수)이 호출됨
