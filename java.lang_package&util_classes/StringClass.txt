String클래스
- String클래스 = 데이터(char[]) + 메서드(문자열 관련)
- 내용을 변경할 수 없는 불변(immutable) 클래스
- 덧셈 연산자(+)를 이용한 문자열 결합은 성능이 떨어짐(내용을 변경할 수 없기 때문에 계속 새로운 객체를 만든다.)
문자열의 결합이나 변경이 잦다면, 내용을 변경 가능한 StringBuffer를 사용

문자열 비교
- String str = “abc”;와 String str = new String(“abc”);의 비교

String str1 = “abc”;	// 문자열 리터럴 “abc”의 주소가 str1에 저장됨
String str2 = “abc’;	// 문자열 리터럴 “abc”의 주소가 str2에 저장됨
str1 == str2
0x100 == 0x100
true
str1 == str2 ? true
str1.equals(str2) ? true

String str3 = new String(“abc”);	// 새로운 String인스턴스를 생성
String str4 = new String(“abc”);	// 새로운 String인스턴스를 생성
str3 == str4
0x200 = 0x300
false
str1 == str2 ? false
str1.equals(str2) ? true

문자열 리터럴
- 문자열 리터럴은 프로그램 실행시 자동으로 생성된다.(constant pool에 저장)
- 같은 내용의 문자열 리터럴은 하나만 만들어진다.

빈 문자열(“”, empty string)
- 내용이 없는 문자열. 크기가 0인 char형 배열을 저장하는 문자열
String str = “”;	// str을 빈 문자열로 초기화

- 크기가 0인 배열을 생성하는 것은 어느 타입이나 가능
char[] chart = new char[0];	// 길이 0인 char배열
int[] iArr = {};				// 길이가 0인 int배열

- 문자(char)와 문자열(String)의 초기화
String s = null;                 —>              String s = “”;	// 빈 문자열로 초기화
Char c = ‘\u0000’;	          —>	              char c = ‘ ‘;	// 공백으로 초기화

String 클래스의 생성자와 메서드

String(char[] value)
- char[]을 String으로 바꿀 때(반대로는 toCharArryau())

String(StringBuffer buf)
- StringBuffer(내용 변경 가능)를 String(불가능)으로 바꿀 때 사용

char charAt(int index)
- 문자 1개 반환

int compareTo(String str)
- 문자열을 사전 순서(Dictionary Order)로 비교한다.
- 같으면 0, 왼쪽이 작으면 음수, 오른쪽이 작으면 양수 반환
ex. int i = “aaa”.compareTo(“bbb”); —> -1 반환

String concat(String str)
- 문자열을 뒤에 덧붙인다.

boolean contains(CharSequence s)
- 지정된 문자열이 포함되어 있는지 검사한다.
CharSequence는 interface - 인터페이스의 장점 : 서로 관계 없는 클래스들의 관계를 맺어줄 수 있다.
￼

boolean endsWith(String suffix)
- 지정된 문자열(suffix)로 끝나는지 검사한다.(startsWith도 있음)

boolean equalsIgonoreCase(String str)
- 문자열과 String인스턴스의 문자열을 대소문자 구분없이 비교한다.

int indexOf(int ch)
- 주어진 문자(ch)가 문자열에 존재하는지 확인하여 위치(index)를 알려준다. 못 찾으면 -1을 반환한다.

int indexOf(int ch, int pos)
- 주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(pos)부터 확인하여 위치(index)를 알려준다. 못 찾으면 -1을 반환한다.

int indexOf(String str)
- 주어진 문자열이 존재하는지 확인하여 그 위치(index)를 알려준다. 없이면 -1을 반환한다.

int lastIndexOf(int ch)
- 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치(index)를 알려준다 못찾으면 -1 반환한다.
￼

int lastIndexOf(String str)
- 지정된 문자열을 인스턴스의 문자열 끝에서 부터 찾아서 위치(index)를 알려준다. 못찾으면 -1 반환한다.

int length()
- 문자열의 길이를 알려준다.

String[] split(String regex)
- 문자열을 지정된 분리자(regex)로 나누어 문자열 배열에 담아 반환한다.
- regex는 정규식(Regular Expression)

String[] split(String regex, int limit)
- 문자열을 지정된 분리자(regex)로 나누어 문자열 배열에 담아 반환한다. 단, 문자열 전체를 지정된수(limit)로 자른다.

boolean startsWith(String prefix)
- 주어진 문자열(prefix)로 시작하는지 검사한다.

String substring(int begin)
String substring(int begin, int end)
- 주어진 시작 위치(begin)부터 끝 위치(end)범위에 포함된 문자열을 얻는다. 이 때, 시작위치의 문자는 범위에 포함되지만, 끝 위치의 문자는 포함되지 않는다.(begin≦ x < end)

String trim()
- 문자열의 왼쪽 끝과 오른쪽 끝에 있는 공백을 없앤 결과를 반환한다. 이 때 문자열 중간에 있는 공백은 제거되지 않는다.

static Strong valueOf(boolean b)
static String valueOf(char c)
static String valueOf(int i)
static String valueOf(long l)
static String valueOf(float f)
static String valueOf(double d)
static String valueOf(object o)
- 지정된 값을 문자열로 변환하여 반환한다. 참조변수의 경우, toString()을 호출한 결과를 반환한다.
